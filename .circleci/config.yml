version: '2.1'
orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: destroy backend & frontend
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: delete S3 content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflowid>> --recursive
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowid: << parameters.workflowid >>
jobs:
  build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build front-end
            command: |
              # Your code here and here dsdesd
              cd frontend
              npm install
              npm run build
              npm audit fix --audit-level=critical --force
              #exit 1
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1

  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              # Your code here
              cd backend
              npm install
              npm run build
              npm audit fix --audit-level=critical --force
              #exit 1
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1

  test-frontend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [frontend-build]
        # Your job code here
        - run:
            name: Frontend unit test
            command: |
              cd frontend
              sudo npm i
              npm run test
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1

  test-backend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [backend-build]
        # Your job code here
        - run:
            name: test backend
            command: |
              cd backend
              npm i
              npm run test
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1


  scan-frontend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [frontend-build]
        # Your job code here
        - run:
            name: scanning frontend
            command: |
              cd frontend
              npm i
              npm audit fix --audit-level=critical --force
              # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
              #npm audit --audit-level=critical
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1

#Adding a space
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout 
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: scanning backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            #npm audit --audit-level=critical
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: installing packages
          command: |
            yum -y install tar gzip git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt --region us-east-1
              cat .circleci/ansible/inventory.txt
            #exit 1
      - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
        key: frontend-build
      # Add ssh keys with fingerprint
      - add_ssh_key:
          fingerprint:
          - "9a:7c:96:eb:b8:6e:60:95:bb:de:99:9e:3a:20:1d:d4"
      # attach workspace
      - attach_workspace:
        at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible openssh-client tar gzip curl ansible
            pip install awscli
            #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
      - run:
          name: Configure server
          command: |
            # Your code here
            environment:
            - TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION')}}"
            - TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES')}}"
            - TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST')}}"
            - TYPEORM_PORT: 5432
            - TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME')}}"
            - TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD')}}"
            - TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE')}}"
            - TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS')}}"
            - TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR')}}
            #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure     

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
    # Here's where you will add some code to rollback on failure      

workflows:
  test-and-deploy:
    jobs:
      - build-frontend:
          context: slack-context
      - build-backend:
          context: slack-context
      - test-frontend:
          requires: [build-frontend]
          context: slack-context
      - test-backend:
          requires: [build-backend]
          context: slack-context
      - scan-backend:
          requires: [build-backend]
          context: slack-context
      - scan-frontend:
          requires: [build-frontend]
          context: slack-context
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context: slack-context
          #filters:
          #  branches:
          #    only: [test-feature-branch]
      #- configure-infrastructure:
       #   requires: [deploy-infrastructure]
      #- run-migrations:
        #  requires: [configure-infrastructure]
      #- deploy-frontend:
        #  requires: [run-migrations]
      #- deploy-backend:
        #  requires: [run-migrations]
      #- smoke-test:
        #  requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
         # requires: [smoke-test]
      #- cleanup:
       #   requires: [cloudfront-update]