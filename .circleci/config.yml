version: '2.1'
orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: destroy backend & frontend
    parameters:
      workflowid:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: delete S3 content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflowid>> --recursive
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowid: << parameters.workflowid >>

  revert-migrations:
      description: Revert.
      parameters:
        workflowid:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - restore_cache:
            key: backend-build
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=`curl -H "token: bc:c0:4a:33:15:8c:7f:e3:e0:79:3b:8d:bb:84:15:a1" --request GET https://kvdb.io/2797DDVfQqUVMSzD5WALik4Y/values/DB_MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7}` 
              echo $SUCCESS
              if [[ $SUCCESS == 1 ]];
              then
                cd ~/project/backend
                npm install
                npm run migrations:revert 
              fi 
jobs:
  build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build front-end
            command: |
              # Your code here and here dsdesd
              cd frontend
              npm install
              npm run build
              npm audit fix --audit-level=critical --force
              #exit 1
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1

  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              # Your code here
              cd backend
              npm install
              npm run build
              npm audit fix --audit-level=critical --force
              #exit 1
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1       
        - save_cache:
            key: build-backend
            paths: [backend/node_modules ] 
        - run:
            name: Compiled code will be retrieved by deploy-backend.yml 
            command: |
              mkdir /tmp/workspace/
              cp ./backend/package.json /tmp/workspace/
              cd backend/dist
              tar -zcvf /tmp/workspace/backend.tgz ./
              tar -zcvf ./../../backend.tgz ./
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1

        - persist_to_workspace:
            root: /tmp/workspace
            paths:
              - package.json
              - backend.tar.gz 


  test-frontend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [frontend-build]
        # Your job code here
        - run:
            name: Frontend unit test
            command: |
              cd frontend
              sudo npm i
              npm run test
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1

  test-backend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [backend-build]
        # Your job code here
        - run:
            name: test backend
            command: |
              cd backend
              npm i
              npm run test
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1


  scan-frontend:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        # Restore from cache
        - restore_cache:
            keys: [frontend-build]
        # Your job code here
        - run:
            name: scanning frontend
            command: |
              cd frontend
              npm i
              npm audit fix --audit-level=critical --force
              # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
              #npm audit --audit-level=critical
        - slack/notify:
            channel: udapeople
            event: fail
            template: basic_fail_1

#Adding a space
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout 
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: scanning backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            #npm audit --audit-level=critical
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: installing packages
          command: |
            yum -y install tar gzip git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Name=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-1 
              #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Name=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-1
              #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here  Remove this filter fromm the code below #--filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt --region us-east-1
              cat .circleci/ansible/inventory.txt
            #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   
      - revert-migrations  

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          key: frontend-build
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "9a:7c:96:eb:b8:6e:60:95:bb:de:99:9e:3a:20:1d:d4"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible openssh-client tar gzip curl ansible
            pip install awscli
            #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -inventory configure-server.yml
            #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure     
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          key: frontend-build
      - attach_workspace:
          at: . 
      - run:
          name: Install AWS CLI dependencies
          # working_directory: /tmp
          command: |
            sudo apt-get update
            sudo apt install python3 -y   #removed package npm
            sudo apt-get install unzip  -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
      - run:
          name: Run migrations
          no_output_timeout: 20m
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            if grep -q "has been executed successfully." backend/migrations_dump.txt
            then
              #Database migration
              echo "Database Migration"
              curl -H "Content-Type: text/plain" -H "token: 9a:7c:96:eb:b8:6e:60:95:bb:de:99:9e:3a:20:1d:d4" --request PUT --data "success" https://kvdb.io/2797DDVfQqUVMSzD5WALik4Y/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl  -H "Content-Type: text/plain" -H "token: /JU3SmUKQouAF2xg/doHo76hqZUyZIfe8+Wv9yQc6nU" --request PUT --data "failure" https://kvdb.io/2797DDVfQqUVMSzD5WALik4Y/values/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            #exit 1
      - slack/notify:
          channel: udapeople
          event: fail
          template: basic_fail_1
    # Here's where you will add some code to rollback on failure  
      #- destroy-environment
      #- revert-migrations    

workflows:
  test-and-deploy:
    jobs:
      - build-frontend:
          context: slack-context
      - build-backend:
          context: slack-context
      - test-frontend:
          requires: [build-frontend]
          context: slack-context
      - test-backend:
          requires: [build-backend]
          context: slack-context
      - scan-backend:
          requires: [build-backend]
          context: slack-context
      - scan-frontend:
          requires: [build-frontend]
          context: slack-context
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context: slack-context
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: slack-context
      - run-migrations:
          requires: [configure-infrastructure]
          context: slack-context
      #- deploy-frontend:
        #  requires: [run-migrations]
      #- deploy-backend:
        #  requires: [run-migrations]
      #- smoke-test:
        #  requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
         # requires: [smoke-test]
      #- cleanup:
       #   requires: [cloudfront-update]